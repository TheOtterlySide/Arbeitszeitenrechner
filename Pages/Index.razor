@page "/"
@inject IJSRuntime JsRuntime;

<!--suppress ALL -->
<PageTitle>Arbeitszeitenrechner</PageTitle>

<div class="table-responsive">
    <table class="table table-borderless">
        <thead>
        <tr>
            <th class="col-lg-6">
                <div>
                    <h1>Pausenzeit</h1>
                </div>
            </th>
            <th class="col-lg-6">
                <div>
                    <h1>Arbeitszeit</h1>
                </div>
            </th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <th class="col-lg-6">
                <div class="btn-group btn-group-toggle col-lg-12" data-toggle="buttons">
                    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" checked=@(IsCheckedPause(0)) autocomplete="off" @onclick=@(_ => SetPauseValue(0, null))>
                    <label class="btn btn-outline-primary" for="btnradio1">0 Minuten</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" checked=@(IsCheckedPause(30)) @onclick=@(_ => SetPauseValue(30, null))>
                    <label class="btn btn-outline-primary" for="btnradio2">30 Minuten</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" checked=@(IsCheckedPause(45)) @onclick=@(_ => SetPauseValue(45, null))>
                    <label class="btn btn-outline-primary" for="btnradio3">45 Minuten</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio4" autocomplete="off" @onclick=@(_ => SetCustomValueActive(0))>
                    <label class="btn btn-outline-primary" for="btnradio4">Custom</label>

                    @if (showCustomPause)
                    {
                        <tr>
                            <th scope="row"></th>
                            <td>
                                <input type="number" class="form-control mx-2" @bind="customPauseValue"/>
                            </td>
                        </tr>
                    }
                </div>
            </th>
            <th class="col-lg-6">
                <div class="btn-group btn-group-toggle col-lg-12" data-toggle="buttons">

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work1" autocomplete="off" @onclick=@(_ => SetWorkValue(6, null))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work1">6 Stunden</label>

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work2" autocomplete="off" @onclick=@(_ => SetWorkValue(7, null))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work2">7 Stunden</label>

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work3" autocomplete="off" checked @onclick=@(_ => SetWorkValue(8, null))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work3">8 Stunden</label>

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work4" autocomplete="off" @onclick=@(_ => SetWorkValue(10, null))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work4">10 Stunden</label>

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work5" autocomplete="off" @onclick=@(_ => SetCustomValueActive(1))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work5">Custom</label>

                    @if (showCustomWork)
                    {
                        <tr>
                            <th scope="row"></th>
                            <td>
                                <input type="number" class="form-control mx-2" @bind="customWorkValue"/>
                            </td>
                        </tr>
                    }
                </div>
            </th>
        </tr>
        </tbody>
    </table>
</div>
<br/>

<div class="table-responsive">
    <table class="table table-borderless">
        <thead>
        <tr>
            <th class="col-lg-6">
                <h1>Arbeitsbeginn</h1>
            </th>
            <th class="col-lg-6">
                <h1>Arbeitsende</h1>
            </th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <th class="col-lg-6">
                <div class="col-lg-12">
                    <input class="form-control" type="time" @bind="starttime"/>
                </div>
            </th>
            <th class="col-lg-6">
                <div class="col-lg-12">
                    <h3 class="form-control">@endtimeString</h3>
                </div>
            </th>
        </tr>
        </tbody>
    </table>

    <div class="h-100 d-flex align-items-center justify-content-center">
        <h1>Countdown</h1>
    </div>
    <div class="h-100 d-flex align-items-center justify-content-center">
        <h3>@timeleftAsString</h3>
    </div>

    @if (needPause)
    {
        <div class="h-100 d-flex align-items-center justify-content-center">
            <h3>Bis wann Pause gemacht werden muss: @needPauseValue</h3>
        </div>
    }
    <button class="btn btn-primary col-lg-12" data-toggle="button" @onclick=@(_ => CalculateTime(workValue, pauseValue))> Berechne Zeit </button>
</div>

@code
{
    #region Timespan

    TimeSpan pauseValue = new TimeSpan(0, 30, 0);
    TimeSpan workValue = new TimeSpan(8, 0, 0);
    TimeSpan resultTime;
    TimeSpan mustPause = new TimeSpan(hours: 6, 0, 0);
    static TimeSpan timeleft;

    #endregion

    #region DateTime

    DateTime starttime;
    DateTime endtime;
    DateTime time;
    DateTime whenPause = new DateTime();

    #endregion

    string endtimeString = "00:00";
    string needPauseValue;
    bool needPause;
    static string timeleftAsString = string.Empty;

    bool showCustomPause = false;
    bool showCustomWork = false;
    int customPauseValue;
    int customWorkValue;

    bool timeAlive;
    Task timeTask = null;

    static bool isActive;


    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
        await JsRuntime.InvokeVoidAsync("isVisible");
        StateHasChanged();
    }

    [JSInvokable("setTabActive")]
    public void SetActive(bool status)
    {
        isActive = status;
        if (isActive && timeleftAsString != string.Empty)
        {
            CalculateTime(workValue, pauseValue);
        }
        StateHasChanged();
    }


    async Task Timer(CancellationToken ct)
    {
        timeleft = endtime.Subtract(DateTime.Now);
        timeleftAsString = string.Empty;
        var sec = new TimeSpan(0, 0, 1);

        while (timeleft > new TimeSpan() && timeAlive)
        {
            await Task.Delay(1000);
            timeleft = timeleft.Subtract(sec);
            timeleftAsString = timeleft.ToString("hh':'mm':'ss");
            ct.ThrowIfCancellationRequested();
            StateHasChanged();
        }

        timeleftAsString = "Schönen Feierabend";
    }

    private void SetPauseValue(int val, int? id)
    {
        if (id != null) return;
        showCustomPause = false;
        pauseValue = new TimeSpan(0, val, 0);
        StateHasChanged();
    }


    private void SetWorkValue(int val, int? id)
    {
        if (id != null) return;
        showCustomWork = false;
        workValue = new TimeSpan(val, 0, 0);

        if (val >= 9)
        {
            SetPauseValue(45, null);
        }

        StateHasChanged();
    }

    private void SetCustomValueActive(int id)
    {
        if (id == 0)
        {
    //Show Custom Pause Input
            showCustomPause = !showCustomPause;
            StateHasChanged();
        }
        else
        {
            showCustomWork = !showCustomWork;
            StateHasChanged();
        }
    }

    void CalculateTime(TimeSpan hours, TimeSpan minutes)
    {
        CancellationTokenSource cts = new();
        if (showCustomWork || showCustomPause)
        {
            hours = new TimeSpan(customWorkValue, hours.Minutes, 0);
            minutes = new TimeSpan(0, customPauseValue, 0);
        }

        endtime = starttime + DateTime.Today.TimeOfDay + hours + minutes;
        whenPause = starttime + mustPause;

        if (workValue > new TimeSpan(6, 0, 0))
        {
            needPause = true;
            needPauseValue = whenPause.ToString("HH:mm");
        }

        endtimeString = endtime.ToString("HH:mm");

        if (timeTask == null || timeTask.Status.Equals(TaskStatus.Running))
        {
            timeAlive = true;
            timeTask = Timer(cts.Token);
        }
        else
        {
            cts.Cancel();
            cts.TryReset();
            timeAlive = true;
            Timer(cts.Token);
        }
        StateHasChanged();
    }

    private bool IsCheckedPause(int value)
    {
        var result = pauseValue.Minutes == value;
        return result;
    }
}