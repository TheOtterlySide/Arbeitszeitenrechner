@page "/"
@using System.Timers
@implements IDisposable

<PageTitle>Arbeitszeitenrechner</PageTitle>

<div class="table-responsive">
    <table class="table table-borderless">
        <thead>
        <tr>
            <th class="col-lg-6">
                <div>
                    <h1>Pausenzeit</h1>
                </div>
            </th>
            <th class="col-lg-6">
                <div>
                    <h1>Arbeitszeit</h1>
                </div>
            </th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <th class="col-lg-6">
                <div class="btn-group btn-group-toggle col-lg-12" data-toggle="buttons">
                    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" @onclick=@(_ => setPauseValue(0))>
                    <label class="btn btn-outline-primary" for="btnradio1">0 Minuten</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" checked @onclick=@(_ => setPauseValue(30))>
                    <label class="btn btn-outline-primary" for="btnradio2">30 Minuten</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" @onclick=@(_ => setPauseValue(45))>
                    <label class="btn btn-outline-primary" for="btnradio3">45 Minuten</label>
                </div>
            </th>
            <th class="col-lg-6">
                <div class="btn-group btn-group-toggle col-lg-12" data-toggle="buttons">

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work1" autocomplete="off" @onclick=@(_ => setWorkValue(6))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work1">6 Stunden</label>

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work2" autocomplete="off" checked @onclick=@(_ => setWorkValue(8))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work2">8 Stunden</label>

                    <input type="radio" class="btn-check" name="btn-radio_Work" id="btn-radio_Work3" autocomplete="off" @onclick=@(_ => setWorkValue(10))>
                    <label class="btn btn-outline-primary" for="btn-radio_Work3">10 Stunden</label>
                </div>
            </th>
        </tr>
        </tbody>
    </table>
</div>
<br/>

<div class="table-responsive">
    <table class="table table-borderless">
        <thead>
        <tr>
            <th class="col-lg-6">
                <h1>Arbeitsbeginn</h1>
            </th>
            <th class="col-lg-6">
                <h1>Arbeitsende</h1>
            </th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <th class="col-lg-6">
                <div class="col-lg-12">
                    <input class="form-control" type="time" @bind="starttime"/>
                </div>
            </th>
            <th class="col-lg-6">
                <div class="col-lg-12">
                    <h3 class="form-control">@endtimeString</h3>
                </div>
            </th>
        </tr>
        </tbody>
    </table>

    <div class="h-100 d-flex align-items-center justify-content-center">
        <h1>Countdown</h1>
    </div>
    <div class="h-100 d-flex align-items-center justify-content-center">
        <h3>@timeleftAsString</h3>
    </div>
    <button class="btn btn-primary col-lg-12" data-toggle="button" @onclick=@(_ => calculateTime(workValue, pauseValue))> Berechne Zeit </button>
</div>

@code
{
    TimeSpan pauseValue = new TimeSpan(0,30,0);
    TimeSpan workValue = new TimeSpan(8,0,0);
    DateTime starttime;
    DateTime endtime;
    string endtimeString = "00:00";
    TimeSpan resultTime;
    DateTime time;
    private Timer? secondsTimer;

    TimeSpan timeleft;
    string timeleftAsString ="00:00";

    async Task Timer()
    {
        timeleft = endtime.Subtract(DateTime.Now);
        
        while (timeleft > new TimeSpan())
        {
            await Task.Delay(1000);
            timeleft = timeleft.Subtract(new TimeSpan(0, 0, 1));
            timeleftAsString = timeleft.ToString("hh':'mm':'ss");
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        secondsTimer?.Dispose();
    }

    private void setPauseValue(int val)
    {
        pauseValue = new TimeSpan(0, val, 0);
        StateHasChanged();
    }


    private void setWorkValue(int val)
    {
        workValue = new TimeSpan(val, 0, 0);
        StateHasChanged();
    }

    void calculateTime(TimeSpan hours, TimeSpan minutes)
    {
        endtime = starttime + DateTime.Today.TimeOfDay + hours + minutes;
        endtimeString = endtime.ToString("HH:mm");
        Timer();
        StateHasChanged();
    }
}